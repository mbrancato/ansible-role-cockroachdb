---
- include_tasks: "install-{{ ansible_facts.os_family }}.yml"

# Download the cockroach binary
- name: Create temporary directory for cockroach
  tempfile:
    state: directory
    suffix: cockroach
  register: cockroach_temp

- name: Download cockroach binary
  get_url:
    url: "https://binaries.cockroachdb.com/cockroach-{{ roach_version }}.linux-amd64.tgz"
    dest: "{{ cockroach_temp.path }}/cockroach.tgz"
  register: dl_cockroach

- name: Create temporary directory to extract cockroach
  tempfile:
    state: directory
    suffix: cockroach
  register: cockroach_extract_temp

- name: Extract cockroach
  unarchive:
    src: "{{ dl_cockroach.dest }}"
    dest: "{{ cockroach_extract_temp.path }}/"
    remote_src: yes

- name: Install cockroach binary
  copy:
    src: "{{ cockroach_extract_temp.path }}/cockroach-{{ roach_version }}.linux-amd64/cockroach"
    dest: /usr/local/bin/cockroach
    mode: 0755
    remote_src: yes

- name: Create cockroach group
  group:
    name: cockroach
    state: present

- name: Create cockroach user
  user:
    name: cockroach
    comment: cockroachdb
    group: cockroach
    system: yes
    state: present

- name: Create cockroach directories
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ roach_path }}"
    - "{{ roach_path }}/certs"

# PKI
- name: Setup PKI
  when: not roach_pki_custom_ca
  block:
  # Simple PKI with `cockroach certs`

    # This path `roach_pki_path` is for the simple PKI only
    - name: Create PKI directories
      file:
        path: "{{ roach_pki_path }}"
        state: directory
      delegate_to: "{{ play_hosts[0] }}"
      run_once: yes

    - name: Check CA file on first node
      stat:
        path: "{{ roach_pki_path }}/ca.key"
      register: ca_key_stat
      delegate_to: "{{ play_hosts[0] }}"
      run_once: yes

    - name: Create CA cert
      shell: "/usr/local/bin/cockroach cert create-ca --certs-dir={{ roach_pki_path }} --ca-key={{ roach_pki_path }}/ca.key"
      delegate_to: "{{ play_hosts[0] }}"
      run_once: yes
      when:
        - not ca_key_stat.stat.exists

    - name: Check cert file for node
      stat:
        path: "{{ roach_pki_path }}/node-{{ ansible_facts['hostname'] }}.key"
      register: node_key_stat
      delegate_to: "{{ play_hosts[0] }}"
      run_once: yes

    # This is ugly but ended up being the simplest way with how cockroach works
    # and not requing the localhost to be the CA
    - name: Create node certs
      shell: |
        {% for host in play_hosts %}
        /usr/local/bin/cockroach cert create-node \
        {{ hostvars[host]['ansible_all_ipv4_addresses'] | join(' ') }} \
        {{ hostvars[host]['ansible_facts']['fqdn'] }} \
        {{ hostvars[host]['ansible_facts']['hostname'] }} \
        localhost 127.0.0.1 \
        --certs-dir={{ roach_pki_path }} \
        --ca-key={{ roach_pki_path }}/ca.key && \
        mv {{ roach_pki_path }}/node.crt {{ roach_pki_path }}/node-{{ hostvars[host]['ansible_facts']['hostname'] }}.crt && \
        mv {{ roach_pki_path }}/node.key {{ roach_pki_path }}/node-{{ hostvars[host]['ansible_facts']['hostname'] }}.key
        {% endfor %}

      delegate_to: "{{ play_hosts[0] }}"
      run_once: yes
      when:
        - not node_key_stat.stat.exists

  #  # This is probably a bug that cockroach doesn't do this
  #  - name: Secure private keys
  #    file:
  #      path: "{{ roach_pki_path }}/node-{{ ansible_hostname }}.key"
  #      mode: '0600'
  #    delegate_to: "{{ play_hosts[0] }}"

    - name: Read CA cert file
      slurp:
        src: "{{ roach_pki_path }}/ca.crt"
      delegate_to: "{{ play_hosts[0] }}"
      run_once: yes
      register: ca_cert

    - name: Read node cert file
      slurp:
        src: "{{ roach_pki_path }}/node-{{ ansible_hostname }}.crt"
      delegate_to: "{{ play_hosts[0] }}"
      register: node_cert

    - name: Read node key file
      slurp:
        src: "{{ roach_pki_path }}/node-{{ ansible_hostname }}.key"
      delegate_to: "{{ play_hosts[0] }}"
      register: node_key

    - name: Install cert files
      copy:
        dest: "{{ roach_path ~ '/certs/' ~ item.file }}"
        content: "{{ item.content | b64decode }}"
        mode: "{{ item.mode }}"
      with_items:
        - file: ca.crt
          content: "{{ ca_cert.content }}"
          mode: '0644'
        - file: node.crt
          content: "{{ node_cert.content }}"
          mode: '0644'
        - file: node.key
          content: "{{ node_key.content }}"
          mode: '0600'

    # From here on, switch to the roach_path because cockroach is too opinionated
    # about its diretory and doesn't like other cert filenames
    - name: Check cert file for client
      stat:
        path: "{{ roach_path }}/certs/client.root.key"
      register: client_key_stat
      delegate_to: "{{ play_hosts[0] }}"
      run_once: yes

    - name: Create client cert
      shell: |
        /usr/local/bin/cockroach cert create-client root --certs-dir={{ roach_path }}/certs --ca-key={{ roach_pki_path }}/ca.key
      delegate_to: "{{ play_hosts[0] }}"
      run_once: yes
      when:
        - not client_key_stat.stat.exists

    - name: Install client cert files
      fetch:
        src: "{{ roach_path ~ '/certs/' ~ item.file }}"
        dest: "{{ lookup('env','HOME') ~ '/' ~ item.file }}"
        mode: "{{ item.mode }}"
      with_items:
        - file: ca.crt
          mode: '0644'
        - file: client.root.crt
          mode: '0644'
        - file: client.root.key
          mode: '0600'
      delegate_to: "{{ play_hosts[0] }}"
      run_once: yes

- name: Set ownership on cockroach directories
  file:
    path: "{{ roach_path }}"
    state: directory
    recurse: yes
    owner: cockroach
    group: cockroach

- name: Install systemd unit file
  vars:
    roach_join_addresses: >-
      {% for host in play_hosts[:-1] %}{{ hostvars[host]['ansible_default_ipv4']['address'] ~ ',' }}{% endfor %}{{ hostvars[play_hosts[-1]]['ansible_default_ipv4']['address'] }}
  template:
    src: cockroach.service.j2
    dest: "{{ roach_systemd_path }}/cockroachdb.service"
  register: roach_systemd_unit

- name: Restart cockroachdb
  systemd:
    state: restarted
    daemon_reload: yes
    name: cockroachdb
  register: roach_restart_cockroach
  when:
    - roach_systemd_unit.changed

# This should have no effect if already restarted
- name: Start cockroachdb
  systemd:
    state: started
    daemon_reload: yes
    name: cockroachdb
  register: roach_start_cockroach

- name: Wait for port 26257
  wait_for:
    port: 26257
    delay: 10
  when: |
    roach_start_cockroach.changed
    or
    roach_restart_cockroach.changed

# This expects the user client cert to be on the host
- name: Check cluster initialization
  shell: /usr/local/bin/cockroach sql --execute="SELECT 1" --user={{ roach_init_check_user }} --certs-dir={{ roach_init_cert_path }} --url postgresql://localhost
  register: cluster_init_check
  delegate_to: "{% if roach_pki_custom_ca %}localhost{% else %}{{ play_hosts[0] }}{% endif %}"
  run_once: yes
  ignore_errors: yes

- name: Initialize the cluster
  shell: timeout 30 /usr/local/bin/cockroach init --certs-dir={{ roach_init_cert_path }} --host={{ ansible_default_ipv4['address'] }} --cluster-name={{ roach_cluster_name }}
  delegate_to: "{{ play_hosts[0] }}"
  run_once: yes
  when:
    - not cluster_init_check.rc == 0
